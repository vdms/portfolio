/*!
 * fixed.css - fix css defaults.
 * Copyright 2016 Adrian Klimek
 * Released under the MIT License
 * Version 1.0.0
 */
*,
*:before,
*:after {
  -webkit-box-sizing: inherit;
          box-sizing: inherit; }

html {
  line-height: 1;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block; }

html,
body,
div,
span,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
address,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
samp,
small,
strong,
sub,
sup,
var,
b,
i,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
section,
summary,
time,
mark,
audio,
video {
  margin: 0;
  padding: 0;
  vertical-align: baseline;
  border: 0; }

table {
  border-spacing: 0;
  border-collapse: collapse; }

audio,
canvas,
progress,
video {
  display: inline-block; }

a {
  background-color: transparent; }

a:active,
a:hover {
  outline: 0; }

small {
  font-size: 75%; }

[hidden],
template {
  display: none; }

audio:not([controls]) {
  display: none;
  height: 0; }

abbr[title] {
  border-bottom: 1px dotted; }

svg:not(:root) {
  overflow: hidden; }

button,
input,
optgroup,
select,
textarea {
  font: inherit;
  color: inherit; }

textarea {
  overflow: auto; }

input[type='search']::-webkit-search-cancel-button,
input[type='search']::-webkit-search-decoration {
  -webkit-appearance: none; }

input[type='search'] {
  -webkit-appearance: textfield; }

input[type='checkbox'],
input[type='radio'] {
  padding: 0; }

button::-moz-focus-inner,
input::-moz-focus-inner {
  padding: 0;
  border: 0; }

.color-palette {
  -webkit-box-align: start;
      -ms-flex-align: start;
          align-items: flex-start;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
      -ms-flex-direction: row;
          flex-direction: row;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
  -webkit-box-pack: start;
      -ms-flex-pack: start;
          justify-content: flex-start;
  margin-bottom: 2rem; }
  .color-palette > * {
    -webkit-box-flex: 0;
        -ms-flex: 0 0 20%;
            flex: 0 0 20%;
    padding-top: 20%;
    position: relative; }
    .color-palette > *::after {
      bottom: 0;
      border-radius: 50%;
      -webkit-box-shadow: 0 0 2px #6b6b6b;
              box-shadow: 0 0 2px #6b6b6b;
      content: '';
      left: 0;
      margin: .5rem;
      position: absolute;
      right: 0;
      top: 0; }

.icon {
  height: 1.5rem;
  width: 1.5rem; }

.list > li:not(:first-child) {
  margin-top: 1em; }

.list--inline {
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
      -ms-flex-direction: row;
          flex-direction: row; }
  .list--inline > li:not(:first-child) {
    margin-left: 1.5em;
    margin-top: 0; }

.project {
  position: relative; }
  .project__nav {
    position: absolute;
    right: -2rem;
    text-align: right;
    top: 0;
    -webkit-transform: translateX(100%);
            transform: translateX(100%); }
    .project__nav--fixed {
      position: fixed;
      right: calc(100% - 35em - 4rem); }
  .project__header {
    -webkit-box-align: center;
        -ms-flex-align: center;
            align-items: center;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
        -ms-flex-direction: row;
            flex-direction: row;
    font-size: 1.5rem; }
  .project__cover {
    display: block;
    height: auto;
    max-width: 100%;
    width: 10rem; }
  .project__responsible {
    display: inline-block;
    font-size: .8em;
    margin-bottom: 1em;
    padding-right: .5em;
    position: relative; }
    .project__responsible::after {
      background-color: #dbdbdb;
      bottom: 0;
      content: '';
      position: absolute;
      right: 0;
      top: 0;
      width: 150%;
      z-index: -1; }
  .project__link--active {
    font-weight: 700; }
  .project__step {
    line-height: 1;
    padding-bottom: 0.125rem;
    position: relative;
    font-size: 1rem;
    font-weight: 900;
    letter-spacing: .075em;
    margin-bottom: 1em;
    padding-top: 2em;
    text-transform: uppercase; }
    .project__step::after {
      background-color: currentColor;
      content: '';
      height: 2px;
      position: absolute;
      right: 100%;
      top: 100%;
      width: 3em; }

.video-player {
  display: block;
  width: 100%; }

html,
body {
  font-size: 20px;
  height: 100%; }

body {
  -moz-osx-font-smoothing: grayscale;
  -ms-text-size-adjust: 100%;
  -webkit-font-smoothing: antialiased;
  -webkit-text-size-adjust: 100%;
  background-color: #f3f3f3;
  color: #2f2f2f;
  font-family: "Metropolis", Times, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  padding-left: 2rem; }

main {
  max-width: 35em; }

p {
  margin-bottom: 1.5em; }

ul {
  list-style: none; }

a {
  color: inherit;
  text-decoration: none;
  -webkit-transition: 300ms;
  transition: 300ms; }
  a:hover:not([class*='active']) {
    color: #00e6e6; }

img {
  display: block;
  height: auto;
  width: 100%; }

svg {
  fill: currentColor; }

figure {
  border: 1px solid #dbdbdb;
  position: relative;
  margin-bottom: 2rem; }

figcaption {
  font-size: .8em;
  font-style: italic;
  position: absolute;
  top: calc(100% + .25em);
  width: 100%; }

figure + figure,
figure + iframe,
figure + img,
figure + video,
video + figure,
video + iframe,
video + img,
video + video {
  margin-top: 2rem; }

.site__title {
  line-height: 1;
  padding-bottom: 0.125rem;
  position: relative;
  display: block;
  font-size: 1rem;
  font-weight: 900;
  letter-spacing: .075em;
  margin-top: 4rem;
  text-transform: uppercase;
  word-spacing: .2em; }
  .site__title::after {
    background-color: currentColor;
    content: '';
    height: 2px;
    position: absolute;
    right: 100%;
    top: 100%;
    width: 3em; }

.site__nav {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
      -ms-flex-direction: row;
          flex-direction: row;
  margin-bottom: 8rem;
  margin-top: 1rem; }
  .site__nav > * {
    margin-right: 2rem; }

.site__link {
  padding-bottom: .25em;
  position: relative;
  -webkit-transition: 300ms;
  transition: 300ms;
  display: inline-block;
  font-size: 1rem;
  line-height: 1;
  min-width: 5em; }
  .site__link::after {
    background-color: currentColor;
    content: '';
    height: 2px;
    opacity: 0;
    position: absolute;
    right: 100%;
    top: 100%;
    -webkit-transform: translateY(0.15em);
            transform: translateY(0.15em);
    -webkit-transition: 300ms;
    transition: 300ms;
    visibility: hidden;
    width: 1em;
    z-index: 1; }
  .site__link:hover:not([class*='active'])::after {
    opacity: 1;
    -webkit-transform: translateY(0);
            transform: translateY(0);
    visibility: visible; }
  .site__link--active {
    font-weight: 700;
    pointer-events: none; }

.site__contact {
  line-height: 1;
  padding-bottom: 0.125rem;
  position: relative;
  padding-bottom: 0;
  padding-top: 0.125rem; }
  .site__contact::after {
    background-color: currentColor;
    content: '';
    height: 2px;
    position: absolute;
    right: 100%;
    top: 100%;
    width: 3em; }
  .site__contact::after {
    bottom: 100%;
    top: auto; }

.page__title {
  font-size: 4rem;
  font-weight: 700;
  letter-spacing: -.05em;
  line-height: 1;
  margin-bottom: .25em; }

.page__intro {
  font-size: 1.2rem;
  font-weight: 500;
  line-height: 1.25; }

.ql-color--1::after {
  background-color: #13293d; }

.ql-color--2::after {
  background-color: #006494; }

.ql-color--3::after {
  background-color: #3686b5; }

.ql-color--4::after {
  background-color: #5a93b5; }

.ql-color--5::after {
  background-color: #e8f1f2; }

.ql-color--active::after {
  background-color: #e84855; }

.ql-color--black::after {
  background-color: rgba(0, 0, 0, 0.85); }

.ql-color--gray--dark--blueish::after {
  background-color: #243034; }

.ql-color--gray--dark::after {
  background-color: #393c45; }

.ql-color--gray::after {
  background-color: #999999; }

.ql-color--gray--lighter::after {
  background-color: #dbdbdb; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
